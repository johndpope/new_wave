// Generated by CoffeeScript 1.7.1

/*
This function is called the first time that the Realtime model is created
for a file. This function should be used to initialize any values of the
model. In this case, we just create the single string model that will be
used to control our text box. The string has a starting value of 'Hello
Realtime World!', and is named 'text'.
@param model {gapi.drive.realtime.Model} the Realtime root model object.
 */

(function() {
  var Comment, KEYCODES, Thread, User, init_share, initializeModel, model, onFileLoaded, querystring, realtimeOptions, register_types, startRealtime, users;

  initializeModel = function(model) {
    var comments, root;
    root = model.getRoot();
    comments = model.createList();
    root.set('comments', comments);
  };


  /*
  This function is called when the Realtime file has been loaded. It should
  be used to initialize any user interface components and event handlers
  depending on the Realtime model. In this case, create a text control binder
  and bind it to our string model that we created in initializeModel.
  @param doc {gapi.drive.realtime.Document} the Realtime document.
   */

  KEYCODES = {
    enter: 13,
    backspace: 8
  };

  users = [];

  User = (function() {
    function User(_arg) {
      this.container = _arg.container, this.info = _arg.info;
      this.node = $('<div class="user">#{@info.displayname}</div>');
      this.container.append(this.node);
    }

    return User;

  })();

  Thread = (function() {
    function Thread(_arg) {
      var comment, _i, _len, _ref;
      this.model = _arg.model, this.node = _arg.node;
      this.make_new_comment();
      _ref = this.model.asArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comment = _ref[_i];
        this.load_comment(comment);
      }
      this.bind_events();
    }

    Thread.prototype.make_new_comment = function() {
      return this.new_comment = new Comment({
        thread: this
      });
    };

    Thread.prototype.render = function() {
      return this.node = $('<div class="replies"></div>');
    };

    Thread.prototype.post = function(comment) {
      this.model.push(comment.model);
      this.prior_new_comment = this.new_comment;
      if (comment === this.new_comment) {
        return this.make_new_comment();
      }
    };

    Thread.prototype["delete"] = function(comment) {
      this.model.removeValue(comment.model);
      return comment.node.remove();
    };

    Thread.prototype.bind_events = function() {
      this.model.addEventListener(gapi.drive.realtime.EventType.VALUES_ADDED, (function(_this) {
        return function(event) {
          var comment, _i, _len, _ref, _results;
          if (!event.isLocal) {
            _ref = event.values;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              comment = _ref[_i];
              _results.push(_this.load_comment(comment));
            }
            return _results;
          }
        };
      })(this));
      return this.model.addEventListener(gapi.drive.realtime.EventType.VALUES_REMOVED, (function(_this) {
        return function(event) {
          var comment, _i, _len, _ref, _results;
          if (!event.isLocal) {
            _ref = event.values;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              comment = _ref[_i];
              _results.push(console.log(comment));
            }
            return _results;
          }
        };
      })(this));
    };

    Thread.prototype.load_comment = function(comment) {
      return new Comment({
        model: comment,
        thread: this
      });
    };

    return Thread;

  })();

  Comment = (function() {
    function Comment(_arg) {
      var thread_model;
      this.model = _arg.model, this.thread = _arg.thread;
      this.is_persisted = Boolean(this.model);
      this.is_fresh = !this.is_persisted;
      if (this.model == null) {
        this.create_model();
      }
      this.render();
      this.bind_events();
      thread_model = this.model.get('thread');
      if (thread_model) {
        this.child_thread = new Thread({
          model: thread_model,
          node: this.thread_node
        });
      }
    }

    Comment.prototype.create_model = function() {
      return this.model = model.createMap({
        text: model.createString()
      });
    };

    Comment.prototype.render = function() {
      this.node = $('<div class="comment"></div>');
      this.text_node = $('<textarea></textarea>');
      this.node.append(this.text_node);
      if (this.is_persisted) {
        this.thread.new_comment.node.before(this.node);
      } else {
        this.thread.node.append(this.node);
      }
      this.thread_node = $('<div class="thread"></div>');
      return this.node.append(this.thread_node);
    };

    Comment.prototype.track_text = function() {
      return gapi.drive.realtime.databinding.bindString(this.model.get('text'), this.text_node[0]);
    };

    Comment.prototype.bind_events = function() {
      if (this.is_persisted) {
        this.track_text();
      }
      this.text_node.on('keypress', (function(_this) {
        return function(event) {
          if (event.which === KEYCODES.enter) {
            event.preventDefault();
            event.stopPropagation();
            if (_this.text_node.val()) {
              if (_this.is_fresh) {
                _this.thread.new_comment.text_node.focus();
                return _this.is_fresh = false;
              } else {
                return _this.start_thread();
              }
            }
          } else {
            if (!_this.is_persisted) {
              return _this.make_real();
            }
          }
        };
      })(this));
      return this.text_node.on('keydown', (function(_this) {
        return function(event) {
          if (event.which === KEYCODES.backspace && _this !== _this.thread.new_comment && !_this.text_node.val()) {
            event.preventDefault();
            return _this.thread["delete"](_this);
          }
        };
      })(this));
    };

    Comment.prototype.make_real = function() {
      this.thread.post(this);
      this.track_text();
      return this.is_persisted = true;
    };

    Comment.prototype.start_thread = function() {
      var thread_model;
      thread_model = model.createList();
      this.model.set('thread', thread_model);
      this.child_thread = new Thread({
        model: thread_model,
        node: this.thread_node
      });
      return this.child_thread.new_comment.text_node.focus();
    };

    return Comment;

  })();

  register_types = function() {};

  model = null;

  onFileLoaded = function(doc) {
    var root, thread, thread_node, users_node;
    thread_node = $('.conversation');
    users_node = $('.users');
    model = doc.getModel();
    root = model.getRoot();
    thread = root.get('comments');
    new Thread({
      model: thread,
      node: thread_node
    });
    document.addEventListener(gapi.drive.realtime.EventType.COLLABORATOR_JOINED, function(event) {
      var user;
      user = event.collaborator;
      return new User({
        container: users_node,
        info: user
      });
    });
    init_share();
  };

  startRealtime = function() {
    var realtimeLoader;
    realtimeLoader = new rtclient.RealtimeLoader(realtimeOptions);
    realtimeLoader.start();
  };

  realtimeOptions = {
    clientId: "750901531017-tr6fb08mn5kacnd1suht48uj8762dkc5.apps.googleusercontent.com",
    authButtonElementId: "authorizeButton",
    initializeModel: initializeModel,
    autoCreate: true,
    defaultTitle: "New Wave2",
    newFileMimeType: null,
    onFileLoaded: onFileLoaded,
    registerTypes: register_types,
    afterAuth: null
  };

  startRealtime();

  querystring = function(key) {
    var match;
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&");
    match = location.hash.match(new RegExp("[#&]" + key + "=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
  };

  init_share = function() {
    var app_id, file_id, s;
    file_id = querystring('fileIds');
    app_id = '750901531017';
    s = new gapi.drive.share.ShareClient(app_id);
    s.setItemIds([file_id]);
    $('#share-button').on('click', function(event) {
      return s.showSettingsDialog();
    });
  };

}).call(this);
